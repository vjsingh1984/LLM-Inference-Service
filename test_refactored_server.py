#!/usr/bin/env python3
"""Test script for the refactored server."""
import sys
from pathlib import Path

# Add the current directory to Python path
sys.path.insert(0, str(Path(__file__).parent))

def test_imports():
    """Test that all modules can be imported."""
    print("Testing imports...")
    
    try:
        from ollama_server.main import create_app, main
        print("‚úÖ Main module imported successfully")
        
        from ollama_server.config import parse_arguments, ServerConfig
        print("‚úÖ Config module imported successfully")
        
        from ollama_server.models import ModelManager, ModelInfo
        print("‚úÖ Models module imported successfully")
        
        from ollama_server.core import InternalRequest, RequestStatus, RequestTracker, LLAMAExecutor
        print("‚úÖ Core module imported successfully")
        
        from ollama_server.adapters import (
            RequestAdapter, OpenAIAdapter, OllamaChatAdapter, 
            OllamaGenerateAdapter, ClaudeAdapter, VLLMAdapter, HuggingFaceAdapter
        )
        print("‚úÖ Adapters module imported successfully")
        
        from ollama_server.api import create_routes, RequestHandler
        print("‚úÖ API module imported successfully")
        
        from ollama_server.utils.response_processing import ThinkTagProcessor
        print("‚úÖ Utils module imported successfully")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Import failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_think_tag_processing():
    """Test think tag processing functionality."""
    print("\nTesting think tag processing...")
    
    try:
        from ollama_server.utils.response_processing import ThinkTagProcessor
        
        # Test text with think tags
        test_text = """<think>
This is thinking content about quantum computing.
The user wants to know about quantum mechanics.
</think>Quantum computing is a revolutionary technology that uses quantum mechanics to process information."""
        
        think_content, clean_response = ThinkTagProcessor.extract_think_content(test_text)
        
        print(f"‚úÖ Extracted think content: '{think_content[:50]}...'")
        print(f"‚úÖ Clean response: '{clean_response[:50]}...'")
        
        # Test preservation for different API formats
        ollama_preserved = ThinkTagProcessor.process_response_with_think_tags(test_text, 'ollama_generate', True)
        openai_cleaned = ThinkTagProcessor.process_response_with_think_tags(test_text, 'openai', True)
        
        assert '<think>' in ollama_preserved, "Think tags should be preserved for Ollama"
        assert '<think>' not in openai_cleaned, "Think tags should be removed for OpenAI"
        
        print("‚úÖ Think tag processing works correctly")
        return True
        
    except Exception as e:
        print(f"‚ùå Think tag processing test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_config_parsing():
    """Test configuration parsing."""
    print("\nTesting configuration parsing...")
    
    try:
        from ollama_server.config import ServerConfig
        from pathlib import Path
        
        # Create a sample config
        config = ServerConfig(
            model_dir=Path("/test/models"),
            llama_cpp_dir=Path("/test/llama.cpp"),
            log_dir=Path("/test/logs"),
            port=8000,
            host="0.0.0.0",
            debug=False,
            default_tensor_split="0.25,0.25,0.25,0.25"
        )
        
        print(f"‚úÖ Config created: models_dir={config.models_dir}")
        print(f"‚úÖ Config properties: manifests_dir={config.manifests_dir}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Config test failed: {e}")
        return False

def main():
    """Run all tests."""
    print("üß™ Testing Refactored Ollama Server")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_think_tag_processing,
        test_config_parsing,
    ]
    
    passed = 0
    total = len(tests)
    
    for test_func in tests:
        if test_func():
            passed += 1
        else:
            print()
    
    print("\n" + "=" * 50)
    print(f"üéØ Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! Refactoring is successful.")
        print("\nüìã What's been accomplished:")
        print("   ‚úÖ Modular package structure")
        print("   ‚úÖ Separated concerns (models, core, adapters, api)")
        print("   ‚úÖ Think tag preservation feature")
        print("   ‚úÖ Apache 2.0 licensing")
        print("   ‚úÖ Comprehensive documentation")
        print("   ‚úÖ Architecture diagrams")
        print("\nüöÄ Ready to run with: python ollama_server/main.py")
        return 0
    else:
        print("‚ùå Some tests failed. Check the output above.")
        return 1

if __name__ == "__main__":
    sys.exit(main())